#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date    : 2016-12-01 21:24:50# @Author  : Xingfan Xia (xiax@carleton.edu)# @Link    : http://xiax.tech# @Version : $0.1from selenium import webdriverfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.by import Byimport time, sys, os, getopt, argparsedef execute(driver, script, args):	driver.execute('executePhantomScript', {'script': script, 'args' : args })def renderAsPdf(driver, file):	# driver = webdriver.PhantomJS('phantomjs')	# hack while the python interface lags	driver.command_executor._commands['executePhantomScript'] = ('POST', '/session/$sessionId/phantom/execute')	# driver.get('http://xxf1995.github.io/')	# set page format	# inside the execution script, webpage is "this"	pageFormat = '''this.paperSize = {format: "A2", orientation: "portrait" };'''	execute(driver, pageFormat, [])	# render current page	render = '''this.render("{name}.pdf")'''.format(name=file)	execute(driver, render, [])def screenshot(driver):	'''	This section is dedicated to logining into moodle	'''	# ==============================================================	wait1 = WebDriverWait(driver, 10)	wait1.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#username")))	# username = driver.find_element_by_xpath(".//*[@id='username']")	# password = driver.find_element_by_xpath(".//*[@id='password']")	username = driver.find_element_by_css_selector("#username")	password = driver.find_element_by_css_selector("#password")	renderAsPdf(driver, "login")	username.send_keys("xiax")	password.send_keys("-Xxf19951206")	# submit = driver.find_element_by_xpath("html/body/div[1]/div/div/div/form/div[3]/button")	submit = driver.find_element_by_css_selector('.form-element.form-button')	submit.click()	# wait2 = WebDriverWait(driver, 20)	# wait2.until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".no-overflow>p>a")))	time.sleep(3)	# needs to wait for the page fully displayed!	# driver.save_screenshot('my_homepage.png')	renderAsPdf(driver, "homepage")	# This section is try to take a screen shot of every course page	# ==============================================================	course_1 = driver.find_element_by_xpath(".//*[@id='inst97373']/div[2]/ol/li[1]/ol/li[2]/ol/li[1]/a")	course_1.click()	driver.save_screenshot('course_1.png')	driver.back()	course_2 = driver.find_element_by_xpath(".//*[@id='inst97373']/div[2]/ol/li[1]/ol/li[2]/ol/li[2]/a")	course_2.click()	driver.save_screenshot('course_2.png')	driver.back()	course_1 = driver.find_element_by_xpath(".//*[@id='inst97373']/div[2]/ol/li[1]/ol/li[2]/ol/li[3]/a")	course_3.click()	driver.save_screenshot('course_3.png')	driver.quit()def main(argv):	chromedriver = "./chromedriver"	os.environ["webdriver.chrome.driver"] = chromedriver	# crawl_url = "https://moodle.carleton.edu"	crawl_url = "https://moodle.carleton.edu/auth/shibboleth/index.php"	try:		opts, args = getopt.getopt(argv, "hd:", ["driver="])	except getopt.GetoptError:		print "Error: screenShot.py -d <choose driver>"		sys.exit(2)	for opt, arg in opts:		if opt == "-h":			print "screenShot.py -d <driver_name>"			print '''Choose from the following:s for Safaric for Chromep for PhantomJS			'''			sys.exit()		elif opt in ("-d", "--driver"):			if arg == "s":				driver = webdriver.Safari()			elif arg == "c":				driver = webdriver.Chrome(chromedriver)			elif arg == "p":				driver = webdriver.PhantomJS()			else:				print "invalid driver"				sys.exit()	driver.set_window_size(1920, 1200)	driver.get(crawl_url)	screenshot(driver)if __name__ == '__main__':	main(sys.argv[1:])